#!/usr/bin/perl
use v5.30;
use feature qw(signatures);
use warnings;
no warnings qw(experimental::signatures);
use Encode;
use Getopt::Long qw(:config posix_default no_ignore_case bundling auto_help);
use HTTP::Tiny;
use IO::Select;
use IO::Socket;
use JSON;
use List::Util qw(reduce);
use Path::Tiny;
use Pod::Usage;
use Time::Piece;
use URI;
use URI::QueryParam;

our $VERSION = '0.0.1';
our $VERSION_STRING = "gisp/$VERSION";

use constant +{
    CLIENT_END => 0,
    CLIENT_REQUEST => 1,
    CLIENT_VERSION => 2,
    CLIENT_HOST => 3,
    SERVER_ERROR => 0,
    SERVER_FOUND => 1,
    SERVER_NOT_FOUND => 4,
    BUF_SIZE => 512,
    TIMEOUT => 10,
    CACHE_EXPIRATION => 24 * 60 * 60,  # 1 day
};

binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

sub log_info :prototype($@);
sub log_warn :prototype($@);

sub process($host, $port, $cache_path) {
    my $listner = IO::Socket::INET->new(
        Proto => 'tcp',
        LocalAddr => $host,
        LocalPort => $port,
        Listen => SOMAXCONN,
        Reuse => 1,
    ) or die "can't listen: $!";

    my $selector = IO::Select->new($listner);

    while (my @ready = $selector->can_read) {
        for my $socket (@ready) {
            if ($socket == $listner) {
                my $new_socket = $listner->accept;
                $selector->add($new_socket);
            } else {
                while ($socket->sysread(my $buf, BUF_SIZE)) {
                    my $command = substr $buf, 0, 1;
                    log_info 'command: %d', $command;
                    if ($command == CLIENT_END) {
                        break;
                    } elsif ($command == CLIENT_REQUEST) {
                        my $command_end = (index $buf, ' ', 1) || (index $buf, "\n", 1);
                        my $kana = substr $buf, 1, $command_end - 1;
                        my $decoded = decode(eucjp => $kana);
                        log_info 'kana: %s', $decoded;
                        my $result = eval {
                            if (my $kanji = search($decoded, $cache_path)) {
                                sprintf "%d/%s\n", SERVER_FOUND, $kanji;
                            } else {
                                sprintf "%d%s \n", SERVER_NOT_FOUND, $decoded;
                            }
                        };
                        if ($@) {
                            log_warn 'error in process: %s', $@;
                            $result = sprintf "%d\n", SERVER_ERROR;
                        }
                        log_info 'result: %s', $result;
                        $socket->write(encode(eucjp => $result));
                    } elsif ($command == CLIENT_VERSION) {
                        $socket->write($VERSION_STRING . ' ');
                    } elsif ($command == CLIENT_HOST) {
                        my $result = sprintf '%s:%s: ', $socket->sockhost, $socket->sockport;
                        $socket->write($result);
                    }
                    $selector->remove($socket);
                    $socket->close;
                }
            }
        }
    }
}

our $CACHE;
sub search($kana, $cache_path, $now = time) {
    $CACHE //= load_cache($cache_path);
    if ($CACHE->{$kana} && $now < $CACHE->{$kana}{ctime} + CACHE_EXPIRATION) {
        log_info 'cache hit: %s', $kana;
        $CACHE->{$kana}{kanji};
    } else {
        my $kanji = google_ime($kana);
        if (defined $kanji) {
            $CACHE->{$kana} = {
                ctime => $now,
                kanji => $kanji,
            };
        }
        save_cache($cache_path);
        $kanji;
    }
}

sub load_cache($cache_path) {
    if (!$cache_path->exists) {
        return +{};
    }
    my @lines = $cache_path->lines_utf8;
    if (@lines == 0) {
        return +{};
    }
    $CACHE = reduce {
        my ($ctime, $kana, $kanji) = split /\t/, $b;
        $a->{$kana} = +{ ctime => $ctime, kanji => $kanji };
        $a;
    } +{}, $cache_path->lines_utf8;
}

sub save_cache($cache_path) {
    $cache_path->spew_utf8(
        map {
            sprintf "%d\t%s\t%s\n", $CACHE->{$_}{ctime}, $_, $CACHE->{$_}{kanji}
        } sort keys $CACHE->%*
    );
}

sub make_uri($kana) {
    (my $text = $kana) =~ s/([a-z]?)$/,$1/;
    my $uri = URI->new('http://www.google.com/transliterate');
    $uri->query_param('langpair', 'ja-Hira|ja');
    $uri->query_param('text', $text);
    $uri;
}

sub google_ime($kana) {
    my $result = eval {
        my $response = HTTP::Tiny->new(timeout => TIMEOUT)->get(make_uri($kana));
        if ($response->{success}) {
            my $decoded = decode_json($response->{content});
            join '/', $decoded->[0][1]->@*;
        } else {
            undef;
        }
    };
    if ($@) {
        log_warn 'error in google_ime: %s', $@;
    }
    $result;
}

our $LOG_LEVEL = 0;
sub main {
    my %opt = (
        host => '127.0.0.1',
        port => 55100,
        cache => "$ENV{HOME}/.cache/gisp.txt",
        help => undef,
        verbose => undef,
    );
    GetOptions(
        \%opt, qw(
            host|h=s
            port|p=i
            cache|c=s
            help|h
            verbose|v
            version
        ),
    ) or pod2usage(1);
    $LOG_LEVEL = 1 if $opt{verbose};
    pod2usage(-exitval => 0, -verbose => 2) if $opt{help};
    (say $VERSION_STRING), exit if $opt{version};
    process($opt{host}, $opt{port}, path($opt{cache}))
}

sub log_info :prototype($@) ($fmt, @args) {
    if ($LOG_LEVEL > 0) {
        printf "[gisp] %s $fmt\n", localtime->strftime('%FT%T'), @args;
    }
}

sub log_warn :prototype($@) ($fmt, @args) {
    warn sprintf "[gisp] %s $fmt\n", localtime->strftime('%FT%T'), @args;
}

main if $0 eq __FILE__;

1;

=encoding utf-8

=head1 NAME

gisp - Yet another Google IME for SKK

=head1 SYNOPIS

    # Run the server
    % gisp

    # Specify the host
    % gisp -h 127.0.0.1 -p 55100

=head1 DESCRIPTION

gisp は SKK プロトコルを実装したサーバーです。読みをリクエストすると返り値として
変換結果を返します。内部では読みを
L<Google CGI API for Japanese|https://www.google.co.jp/ime/cgiapi.html> に送信
し、その返り値をそのまま使っています。

オプションを何も指定しなかった場合、C<127.0.0.1:55100> で待ち受けます。AquaSKK
などの設定でこのホストとポート番号を指定してください。

レポジトリーには Homebrew Formula を同梱していますので、次のようにしてシステムに
登録し、ログイン時に自動的に起動させることができます。

    % brew tap delphinus/gisp
    % brew install gisp
    % brew services start gisp

NOTE: Homebrew に関する機能は、現時点では macOS でのみ動作を確認しています。

=head1 OPTIONS

=over

=item B<--host> I<host>, B<-h> I<host>

サーバーが起動するホスト名です。

Default: C<"127.0.0.1">

=item B<--port> I<port>, B<-p> I<port>

サーバーが起動するポート番号です。

Default: C<55100>

=item B<--cache> F</path/to/file>, B<-c> F</path/to/file>

Google CGI API for Japanese にリクエストした結果をキャッシュするファイルのパスで
す。

Default: F<~/.cache/gisp.txt>

=item B<--help>, B<-h>

このヘルプを表示して終了します。

=item B<--verbose>, B<-v>

実行ログを標準出力に吐きます。エラーについてはこのオプションを指定しない場合も標
準エラー出力に吐きます。

=item B<--version>

バージョン文字列を吐いて終了します。

=back

=head1 COPYRIGHT & LICENSE

Copyright 2023 JINNOUCHI Yasushi <me@delphinus.dev>

This library is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=head1 SEE ALSO

=over

=item *

L<SKKServ - PySocialSKKServ Wiki - PySocialSKKServ - OSDN|https://ja.osdn.net/projects/pysocialskkserv/wiki/SKKServ>

=back

=cut
